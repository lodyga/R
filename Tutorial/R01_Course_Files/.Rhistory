load("C:\\Users\\Ukasz\\Desktop\\R01_Course_Files\\R01_2_1_InstallingR.R")
q()
library(datasets)
barplot(mtcars$cyl)             # Doesn't work
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
import1 <- import("C:\Users\Ukasz\Desktop\mbb.csv)
head(import1)
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Clear mind :)
import1 <- import("C:\Users\Ukasz\Desktop\mbb.csv)
head(import1)
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Clear mind :)
import1 <- import("C:\Users\Ukasz\Desktop\mbb.csv")
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
import1 <- import("C:\Users\Ukasz\Desktop\mbb.csv")
import1 <- import("C:/Users/Ukasz/Desktop/mbb.csv")
head(import1)
import1 <- import("C:/Users/Ukasz/Desktop/qwer.csv")
head(import1)
import1 <- import("C:/Users/Ukasz/Desktop/qwer1.csv")
head(import1)
import1
setwd("C:/Users/Ukasz/Desktop/R01_Course_Files")
setwd("C:/Users/Ukasz/Desktop/R01_Course_Files")
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
head(rio_csv)
# CSV
rio_csv <- import("C:/Users/Ukasz/Desktop/mbb.csv")
head(rio_csv)
# TXT
rio_txt <- import("C:/Users/Ukasz/Desktop/mbb.txt")
head(rio_txt)
# Excel XLSX
rio_xlsx <- import("C:/Users/Ukasz/Desktop/mbb.xlsx")
head(rio_xlsx)
?View
View(rio_csv)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
cars <- mtcars[, c(1:4, 6, 7, 9:11)]
head(cars)
(dist(cars))
(dist(cars))
plot(dist(cars))
hc1 <- cars %>%
plot(hc)          # Plot dendrogram
hc1 <- cars %>% dist(cars)
hc1 <- cars %>% dist
plot(hc1)          # Plot dendrogram
plot(hc1)          # Plot dendrogram
hc1 <- cars %>% dist
plot(hc1)          # Plot dendrogram
hc1 <- cars %>% dist
plot(hc1)          # Plot dendrogram
plot(hc)          # Plot dendrogram
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
plot(hc1)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 5, border = "darkred")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 3, border = "blue")
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
plot(dist(cars))
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 2, border = "blue")
(procomp(cars))
(prcomp(cars))
summamry(prcomp(cars))
summary(prcomp(cars))
plot(prcomp(cars))
cars <- mtcars[, c(1:4, 6, 7, 9:11)]
plot(prcomp(cars))
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = F,  # Centers means to 0 (optional)
scale = F)   # Sets unit variance (helpful)
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = T,  # Centers means to 0 (optional)
scale = F)   # Sets unit variance (helpful)
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = F,  # Centers means to 0 (optional)
scale = F)   # Sets unit variance (helpful)
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = F,  # Centers means to 0 (optional)
scale = T)   # Sets unit variance (helpful)
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = T,  # Centers means to 0 (optional)
scale = T)   # Sets unit variance (helpful)
plot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = T,  # Centers means to 0 (optional)
scale = T)   # Sets unit variance (helpful)
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
plot(pc)
biplot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = F,  # Centers means to 0 (optional)
scale = F)   # Sets unit variance (helpful)
biplot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = T,  # Centers means to 0 (optional)
scale = F)   # Sets unit variance (helpful)
biplot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = F,  # Centers means to 0 (optional)
scale = T)   # Sets unit variance (helpful)
biplot(pc)
# For entire data frame ####################################
pc <- prcomp(cars,
center = T,  # Centers means to 0 (optional)
scale = T)   # Sets unit variance (helpful)
biplot(pc)
?USJudgeRatings
data <- USJudgeRatings
?USJudgeRatings
head(USJudgeRatings)
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
y
# Using variable groups
reg1 <- lm(y ~ x)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
anova(reg1)            # Coefficients w/inferential tests
coef(reg1)             # Coefficients (same as reg1)
confint(reg1)          # CI for coefficients
resid(reg1)            # Residuals case-by-case
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Stagewise: Like stepwise but with better generalizability
forward <- lars(x, y, type = "forward.stagewise")
# LAR: Least Angle Regression
lar <- lars(x, y, type = "lar")
# LASSO: Least Absolute Shrinkage and Selection Operator
lasso <- lars(x, y, type = "lasso")
# Comparison of R^2 for new models
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>%
round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp  # Show values of R^2
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
