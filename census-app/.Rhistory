# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'top',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
h1('h1')
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
h1('h1')
h1('maj tajtle')
h1('maj tajtle')
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
h1("First level title"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("First level title"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
bold("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
strong("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/Tutorial')
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
img("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/Tutorial')
shiny::runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
# Define UI ----
ui <- fluidPage(
titlePanel("Vis"),
sidebarLayout(
sidebarPanel(
p("Create democtaric dsfsdfds fsdfsdf dgf sdsdfgdsfg dfg dfgdf gfd sdgfd "),
selectInput("select", h3("Choose var"), choices = list("Choice 1" = "percent white", "Choice 2" = 2, "Choice 3" = 3), selected = 1))
),
mainPanel()
)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
# Define UI ----
ui <- fluidPage(
titlePanel("Vis"),
sidebarLayout(
sidebarPanel(
p("Create democtaric dsfsdfds fsdfsdf dgf sdsdfgdsfg dfg dfgdf gfd sdgfd "),
selectInput("select", h3("Choose var"), choices = list("Choice 1" = "percent white", "Choice 2" = 2, "Choice 3" = 3), selected = 1)
),
mainPanel()
)
)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
# Define UI ----
ui <- fluidPage(
titlePanel("Vis"),
sidebarLayout(
sidebarPanel(
p("Create democtaric dsfsdfds fsdfsdf dgf sdsdfgdsfg dfg dfgdf gfd sdgfd "),
selectInput("select", h3("Choose var"), choices = list("percent white" = "1", "Choice 2" = 2, "Choice 3" = 3), selected = 1),
sliderInput("slider2", "",min = 0, max = 100, value = c(0, 100))
),
mainPanel()
)
)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
# Define UI ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = list("Percent White" = "1",
"Percent Black",
"Percent Hispanic",
"Percent Asian"),
selected = 1),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var")
)
)
)
# Define server logic ----
server <- function(input, output) {
output$selelected_var <- renderText({"You have selected this"})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
install.packages(c("maps", "mapproj"))
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
# install.packages(c("maps", "mapproj"))
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
setwd("E:\Chmura\Dysk Google\Nauka\Programowanie\R\")
setwd("E:\Chmura\Dysk Google\Nauka\Programowanie\R")
setwd("C:/Users/Ukasz/Desktop")
setwd("E:\Chmura\")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/")
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$black, "darkgreen", "% White")
colnames(counties)
percent_map(counties$total.pop, "darkgreen", "% White")
percent_map(counties$asian, "darkgreen", "% White")
percent_map(counties$asian, "darkgreen", "% Asian")
percent_map(counties$black, "darkblack", "% Nigga")
percent_map(counties$black, "black", "% Nigga")
percent_map(counties$white, "black", "% Nigga")
percent_map(counties$white, "blue", "% Nigga")
percent_map(counties$white, "darkblue", "% Nigga")
percent_map(counties$white, "lightblue", "% Nigga")
percent_map(counties$white, "green", "% Nigga")
percent_map(counties$white, "darkgreen", "% Nigga")
percent_map(counties$white, "darkred", "% Nigga")
percent_map(counties$white, "darkgreen", "% Nigga")
source("helpers.R")
source("helpers.R")
counties <- readRDS("data/countries.rds")
counties <- readRDS("data/countries.rds")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/")
counties <- readRDS("data/countries.rds")
counties <- readRDS("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/data/countries.rds")
counties <- readRDS("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/data/countries.rds")
counties <- readRDS("census-app/data/counties.rds")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/")
counties <- readRDS("census-app/data/counties.rds")
source("helpers.R")
counties <- readRDS("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/data/countries.rds")
source("helpers.R")
source("census-app/helpers.R")
source("census-app/helpers.R")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/")
source("helpers.R")
counties <- readRDS("data/counties.rds")
library(maps)
library(mapproj)
counties <- readRDS("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/data/countries.rds")
percent_map(counties$white, "darkgreen", "% Nigga")
percent_map(counties$white, "darkgreen", "% Nigga")
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
2
legend <- switch(
input$var,
"Percent White" = "% white",
"Percent Black" = "% black",
"Percent Hispanic" = "% hispanic",
"Percent Asian" = "% asian"
)
legend <- switch(
input$var,
"Percent White" = "% white",
"Percent Black" = "% black",
"Percent Hispanic" = "% hispanic",
"Percent Asian" = "% asian"
)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
paste("You have selected this", args)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
