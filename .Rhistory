# Run the app ----
shinyApp(ui = ui, server = server)
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Run the app ----
shinyApp(ui = ui)
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarPanel(
# Sidebar panel for inputs ----
sidebarLayout(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel")
mainPanel('majn panel')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel")
mainPanel('majn panel')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel"),
mainPanel('majn panel')
)
)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'right'
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'right'
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'right',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel"),
position = 'right',
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'right',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'bottom',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'bottom',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'bottom',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'top',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('tytul'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel('majn panel2')
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
h1('h1')
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
h1('h1')
h1('maj tajtle')
h1('maj tajtle')
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
h1("First level title"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("First level title"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
h6("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
bold("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
strong("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/Tutorial')
# Define UI ----
ui <- fluidPage(
titlePanel('panel tajtel'),
sidebarLayout(
position = 'left',
sidebarPanel("sajdbar panel"),
mainPanel(
a("www.browamator.pl"),
br("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title"),
img("Sixth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/Tutorial')
library(maps)
library(mapproj)
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/")
source("helpers.R")
counties <- readRDS("data/counties.rds")
library(shiny); runApp('E:/Chmura/Dysk Google/Nauka/Programowanie/R/app2.R')
head(counties)
runApp("stockVis")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/census-app/")
runApp("stockVis")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/")
runApp("stockVis")
# install.packages("animation")
library(datasets)  # Load base packages manually
runApp("stockVis")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/stockVis/")
runApp("stockVis")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/stockVis/")
runApp("stockVis")
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/")
runApp("stockVis")
library(shiny)
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/")
runApp("stockVis")
# Clear console
cat("\014")  # ctrl+L
setwd("E:/Chmura/Dysk Google/Nauka/Programowanie/R/")
# install.packages("quantmod")
runApp("stockVis")
runApp('stockVis')
runApp('app2.R')
runApp('app2.R')
runApp('stockVis')
runApp('stockVis')
runApp('stockVis')
runApp('stockVis')
runApp('stockVis')
